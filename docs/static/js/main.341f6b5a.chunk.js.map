{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OAEA,0BAAMC,SAdgB,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE9BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,OAUZ,2BACAO,KAAM,OACNC,MAAQT,EACRU,SAvBqB,SAAEP,GACxBF,EAAgBE,EAAEQ,OAAOF,Y,uBCLpBG,EAAO,uCAAI,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAWH,GAF5C,+DAGFI,MAAQF,GAHN,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAVpB,kBAedM,GAfc,4CAAJ,sDCDRO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAGtC,OACQ,yBAAKc,UAAY,qEACb,yBAAKC,IAAQf,EAAMgB,IAAMN,IACzB,+BAAMA,EAAN,OCJCO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCd,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAU,IAJ2B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAsB1C,OAfAC,qBAAY,WAEVxB,EAAUC,GAELwB,MAAO,SAAAC,GAELH,EAAU,CACDf,KAAMkB,EACNL,SAAS,SAIxB,CAAEpB,IAGEqB,EDrB6BK,CAAc1B,GAAlCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QAUtB,OACI,oCACG,wBAAIJ,UAAU,qCAAd,IAAsDhB,EAAtD,KAEGoB,GAAW,uCAEb,yBAAKJ,UAAY,cAITH,EAAOJ,KAAK,SAAAC,GAAG,OAChB,kBAAC,EAAD,eACKiB,IAAKjB,EAAIC,IACJD,UEadkB,EArCO,WAAQ,IAAD,EAEY1C,mBAAS,CAAC,gBAFtB,mBAElB2C,EAFkB,KAEN5C,EAFM,KAWzB,OACA,oCAEA,6CACA,kBAAC,EAAD,CACAA,cAAgBA,IAEhB,6BAEA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OAExB,kBAAC,EAAD,CACA2B,IAAO3B,EACPA,SAAYA,UCzBxB8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.341f6b5a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport  propTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n     const handleinputchange = ( e ) =>{\r\n         setinputValue ( e.target.value );\r\n     }\r\n\r\n     const handlesubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2) {\r\n\r\n        setCategories(cats => [ inputValue, ...cats ] );\r\n        setinputValue('');\r\n        }\r\n        \r\n     }\r\n\r\n\r\n    return (\r\n        \r\n    <form onSubmit={handlesubmit}>\r\n\r\n          <input \r\n          type= \"text\"\r\n          value={ inputValue}\r\n          onChange={handleinputchange}\r\n          />\r\n        \r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: propTypes.func.isRequired\r\n}\r\n","\r\n\r\n\r\n export const getGifs =  async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=CIkBQ43vlWdJ5sQWBdjZwIuY4WS5RDvb`;\r\n    const resp = await fetch ( url );\r\n    const {data} = await resp.json ();\r\n\r\n    const gifs = data.map (img => {\r\n        return{\r\n            id:img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    \r\n    return gifs;\r\n }\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n    //console.log(title, url);\r\n\r\nreturn (\r\n        <div className = \"card animate__animated animate__animate__animate__animate__bounce\">\r\n            <img src = { url } alt= {title}/>\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GiftGrid = ({ category }) => {\r\n     \r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    //se usa para no llamar la funcion cada vez que se renderice el componente, entonces se escribe un [] vacio. \r\n   // useEffect ( () => {\r\n     //   getGifs ( category )\r\n       // .then ( setImages );\r\n   // }, [ category ])\r\n\r\n\r\n     \r\n    return (\r\n        <>\r\n           <h3 className=\"animate__animated animate__bounce\" > { category } </h3> \r\n        \r\n            { loading && <p> Loading</p> }\r\n\r\n            <div className = \"card-grid \">\r\n            \r\n            \r\n                {\r\n                    images.map( img => (\r\n                   <GifGridItem\r\n                        key={img.id} \r\n                        { ...img }\r\n                   />   \r\n\r\n                    ))\r\n                }\r\n            \r\n            </div>  \r\n        </>        \r\n        \r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifts'\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n   const [state, setState] = useState({\r\n       data: [],\r\n       loading : true\r\n   });\r\n\r\n  useEffect ( () => {\r\n\r\n    getGifs ( category )\r\n    \r\n        .then ( imgs => {\r\n          \r\n           setState ({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n        }) \r\n\r\n  }, [ category ])\r\n  \r\n  \r\n  return state;\r\n\r\n}\r\n \r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GiftGrid } from './components/GiftGrid';\r\n//import PropTypes from 'prop-types';\r\n\r\nconst GiftExpertApp = ( ) => {\r\n\r\n    const [categories, setCategories ] = useState(['Dragon Ball']);\r\n    \r\n    \r\n       // const Handleadd = () => {\r\n         //   setCategories( [ ...categories,'Digimon']);\r\n        //setCategories ( cats => [...cats, 'Digimon']); \r\n        //}\r\n\r\n\r\n    return (\r\n    <>\r\n\r\n    <h2>GiftExpertApp</h2>\r\n    <AddCategory \r\n    setCategories={ setCategories }/>\r\n    \r\n    <hr/>\r\n   \r\n    <ol>\r\n        {\r\n            categories.map( category => \r\n            \r\n            <GiftGrid\r\n            key= { category } \r\n            category ={ category }\r\n            />\r\n            )\r\n        }\r\n    </ol>\r\n    </>\r\n);\r\n\r\n}\r\n\r\n\r\nexport default GiftExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GiftExpertApp from './GiftExpertApp';\n\n\nReactDOM.render(\n  \n    <GiftExpertApp/>\n  ,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}